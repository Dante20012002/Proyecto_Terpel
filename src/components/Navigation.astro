---
export interface NavItem {
  label: string;
  href: string;
  dropdown?: NavItem[];
  external?: boolean;
}

const navItems: NavItem[] = [
  {
    label: "Cronograma Escuelas Colombia y EDS Confiable",
    href: "/programacion_escuelascol/"
  },
  {
    label: "Directorio de Instructores",
    href: "#"
  },
  {
    label: "Acerca de Escuelas Colombia",
    href: "/acerca_escuelas/"
  },
  {
    label: "Acerca de Red Virtual",
    href: "/acerca_red_virtual/"
  },
  {
    label: "Acerca de EDS Confiable",
    href: "/acerca_eds_confiable/"
  },
  {
    label: "Boletín Que No le Pase",
    href: "/boletin_qnlp/"
  }
];
---

<nav class="fixed top-0 w-full bg-terpel-secondary shadow-lg z-50">
  <div class="container-custom">
    <div class="flex items-center justify-between py-4">
      <a href="/" class="flex items-center space-x-3 text-3xl font-bold text-terpel-light hover:text-terpel-accent transition-colors duration-300">
        <img 
          src="/media/img/Terpel_simbolo.png" 
          class="w-12 h-10 object-contain" 
          alt="Escuelas 360"
        >
        <span>ESCUELAS 360</span>
      </a>
      
      <!-- Mobile menu button -->
      <button 
        id="mobile-menu-toggle"
        class="lg:hidden flex items-center justify-center w-10 h-10 rounded-md text-terpel-light hover:text-terpel-primary transition-colors duration-300"
        aria-label="Toggle navigation"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
      
      <!-- Desktop navigation -->
      <ul class="hidden lg:flex items-center space-x-8">
        {navItems.map((item) => (
          <li class={item.dropdown ? 'relative group' : ''}>
            {item.dropdown ? (
              <div class="relative">
                <a 
                  href={item.href}
                  class="nav-link flex flex-col items-center text-center text-sm leading-tight py-2"
                >
                  <span set:html={item.label.replace(' ', '<br />')} />
                </a>
                <div class="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 w-56 bg-terpel-secondary border border-terpel-primary rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-300">
                  {item.dropdown.map((subItem) => (
                    <Fragment>
                      {subItem.label === "Ver todas las regionales" && (
                        <hr class="border-terpel-primary/20 my-1" />
                      )}
                      <a 
                        href={subItem.href} 
                        class="block px-4 py-2 text-terpel-light hover:bg-terpel-primary hover:text-terpel-light transition-colors duration-200 first:rounded-t-lg last:rounded-b-lg"
                      >
                        {subItem.label}
                      </a>
                    </Fragment>
                  ))}
                </div>
              </div>
            ) : (
              <a 
                href={item.href} 
                class="nav-link flex flex-col items-center text-center text-sm leading-tight py-2"
                target={item.external ? "_blank" : "_self"}
                rel={item.external ? "noopener noreferrer" : undefined}
              >
                <span set:html={item.label.replace(' ', '<br />')} />
                {item.external && (
                  <svg class="w-3 h-3 ml-1 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                  </svg>
                )}
              </a>
            )}
          </li>
        ))}
      </ul>
    </div>
    
    <!-- Mobile navigation -->
    <div id="mobile-menu" class="lg:hidden hidden border-t border-terpel-primary/20 pt-4 pb-4">
      <ul class="space-y-2">
        {navItems.map((item) => (
          <li>
            {item.dropdown ? (
              <div>
                <button 
                  class="w-full text-left px-4 py-2 text-terpel-light hover:text-terpel-primary transition-colors duration-200 flex items-center justify-between"
                  onclick="toggleMobileDropdown(this)"
                >
                  <span>{item.label}</span>
                  <svg class="w-4 h-4 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </button>
                <div class="hidden pl-6 space-y-1">
                  {item.dropdown.map((subItem) => (
                    <a 
                      href={subItem.href} 
                      class="block px-4 py-2 text-sm text-terpel-light hover:text-terpel-primary transition-colors duration-200"
                    >
                      {subItem.label}
                    </a>
                  ))}
                </div>
              </div>
            ) : (
              <a 
                href={item.href} 
                class="block px-4 py-2 text-terpel-light hover:text-terpel-primary transition-colors duration-200"
                target={item.external ? "_blank" : "_self"}
                rel={item.external ? "noopener noreferrer" : undefined}
              >
                {item.label}
                {item.external && (
                  <svg class="w-3 h-3 ml-1 inline-block" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                  </svg>
                )}
              </a>
            )}
          </li>
        ))}
      </ul>
    </div>
  </div>
</nav>

<script is:inline>
  // Funcionalidad para menú móvil
  document.addEventListener('DOMContentLoaded', function() {
    const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuToggle && mobileMenu) {
      mobileMenuToggle.addEventListener('click', function() {
        mobileMenu.classList.toggle('hidden');
      });
    }
  });
  
  // Función para toggle de dropdown en móvil
  function toggleMobileDropdown(button) {
    const dropdown = button.nextElementSibling;
    const icon = button.querySelector('svg');
    
    if (dropdown) {
      dropdown.classList.toggle('hidden');
      icon.style.transform = dropdown.classList.contains('hidden') ? 'rotate(0deg)' : 'rotate(180deg)';
    }
  }
</script>
