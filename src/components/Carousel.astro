---
export interface CarouselItem {
  src: string;
  alt: string;
  title?: string;
}

export interface Props {
  items: CarouselItem[];
  id?: string;
  autoplay?: boolean;
}

const { 
  items, 
  id = "carouselMain", 
  autoplay = true 
} = Astro.props;
---

<div id={id} class="relative w-full h-[50vh] sm:h-[60vh] md:h-[70vh] lg:h-[80vh] overflow-hidden bg-gray-100">
  <!-- Carousel slides -->
  <div class="relative h-full">
    {items.map((item, index) => (
      <div 
        class={`absolute inset-0 transition-opacity duration-1000 ease-in-out ${index === 0 ? 'opacity-100' : 'opacity-0'}`}
        data-carousel-item={index}
      >
        <img
          src={item.src}
          class="w-full h-full object-cover object-top"
          alt={item.alt}
          loading={index === 0 ? "eager" : "lazy"}
        />
        {item.title && (
          <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 hidden md:block">
            <div class="bg-terpel-secondary/80 text-terpel-light px-6 py-3 rounded-lg backdrop-blur-sm">
              <h5 class="text-xl font-semibold">{item.title}</h5>
            </div>
          </div>
        )}
      </div>
    ))}
  </div>
  
  {items.length > 1 && (
    <Fragment>
      <!-- Previous button -->
      <button
        class="absolute top-1/2 left-4 transform -translate-y-1/2 bg-black/30 hover:bg-black/50 text-white p-3 rounded-full transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-terpel-primary"
        type="button"
        onclick="prevSlide()"
        aria-label="Anterior"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>
      
      <!-- Next button -->
      <button
        class="absolute top-1/2 right-4 transform -translate-y-1/2 bg-black/30 hover:bg-black/50 text-white p-3 rounded-full transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-terpel-primary"
        type="button"
        onclick="nextSlide()"
        aria-label="Siguiente"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>
      
      <!-- Indicators -->
      <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
        {items.map((_, index) => (
          <button
            class={`w-3 h-3 rounded-full transition-colors duration-300 ${index === 0 ? 'bg-terpel-primary' : 'bg-white/50 hover:bg-white/75'}`}
            onclick={`goToSlide(${index})`}
            aria-label={`Ir a diapositiva ${index + 1}`}
            data-carousel-indicator={index}
          ></button>
        ))}
      </div>
    </Fragment>
  )}
</div>

<script is:inline define:vars={{ id, autoplay, itemsLength: items.length }}>
  // Crear un namespace Ãºnico para este carrusel
  window.carousel = window.carousel || {};
  window.carousel[id] = {
    currentSlide: 0,
    autoplayInterval: null,
    itemsLength: itemsLength
  };
  
  const carouselInstance = window.carousel[id];
  
  function showSlide(carouselId, index) {
    const slides = document.querySelectorAll(`#${carouselId} [data-carousel-item]`);
    const indicators = document.querySelectorAll(`#${carouselId} [data-carousel-indicator]`);
    
    slides.forEach((slide, i) => {
      slide.classList.toggle('opacity-100', i === index);
      slide.classList.toggle('opacity-0', i !== index);
    });
    
    indicators.forEach((indicator, i) => {
      if (i === index) {
        indicator.classList.remove('bg-white/50', 'hover:bg-white/75');
        indicator.classList.add('bg-terpel-primary');
      } else {
        indicator.classList.remove('bg-terpel-primary');
        indicator.classList.add('bg-white/50', 'hover:bg-white/75');
      }
    });
    
    window.carousel[carouselId].currentSlide = index;
  }
  
  // Funciones globales para este carrusel
  window.nextSlide = function() {
    const instance = window.carousel[id];
    const nextIndex = (instance.currentSlide + 1) % instance.itemsLength;
    showSlide(id, nextIndex);
  };
  
  window.prevSlide = function() {
    const instance = window.carousel[id];
    const prevIndex = (instance.currentSlide - 1 + instance.itemsLength) % instance.itemsLength;
    showSlide(id, prevIndex);
  };
  
  window.goToSlide = function(index) {
    showSlide(id, index);
  };
  
  // Auto-play functionality
  if (autoplay && itemsLength > 1) {
    function startAutoplay() {
      carouselInstance.autoplayInterval = setInterval(window.nextSlide, 5000);
    }
    
    function stopAutoplay() {
      clearInterval(carouselInstance.autoplayInterval);
    }
    
    // Start autoplay when DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
      startAutoplay();
      
      // Pause on hover
      const carouselElement = document.getElementById(id);
      if (carouselElement) {
        carouselElement.addEventListener('mouseenter', stopAutoplay);
        carouselElement.addEventListener('mouseleave', startAutoplay);
      }
    });
  }
</script>
